<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Fira+Code:wght@300..700&display=swap" rel="stylesheet">
    <link rel="stylesheet"
        href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:opsz,wght,FILL,GRAD@24,400,0,0" />
    <title>CCIM | Common Clip IMproved</title>
    <style>
        .fira-code-font {
            font-family: "Fira Code", monospace;
            font-optical-sizing: auto;
            font-weight: 300;
            font-style: normal;
        }

        * {
            padding: 0;
            margin: 0;
        }

        body {
            overflow-x: hidden;
        }

        main {
            width: 100vw;
            min-height: 100vh;
            display: flex;
            flex-direction: column;
            align-items: center;
            padding-top: 50px;
            padding-bottom: 50px;
        }

        .message-container {
            width: 80vw;
            background-color: #222;
            border-radius: 10px;
        }

        pre {
            padding: 7px;
            overflow: auto;
            font-size: .7rem;
            color: white;
            outline: none;
        }

        .message-header {
            width: 100%;
            height: 25px;
            background-color: #111;
            border-top-left-radius: 10px;
            border-top-right-radius: 10px;
            color: white;
            display: flex;
            justify-content: space-between;
        }

        a {
            text-decoration: none;
            color: inherit;
        }

        button {
            background-color: #55f;
            border: 0;
            padding: 5px 10px;
            padding-right: 20px;
            font-size: 1.5rem;
            font-family: Roboto;
            border-radius: 5px;
            cursor: pointer;
            transition: .2s;
            color: #fff;
            display: flex;
            align-items: center;
            justify-content: center;
            position: relative;
        }

        button .material-symbols-outlined {
            margin-right: 10px;
        }

        #delete-icon {
            position: absolute;
            right: 0;
            top: 0;
            transform: translate(100%, -60%);
            background-color: #f44336;
            border-radius: 100px;
            padding: 5px;
            font-size: 1.25rem;
            z-index: 1;
        }

        button:hover,
        button:active {
            background-color: #44f;
        }

        .hover-icon {
            font-size: 1rem;
            padding: 5px 10px;
            user-select: none;
            cursor: pointer;
        }

        hr {
            width: 90%;
            margin: 50px 0 50px 0;
        }

        .drag-drop {
            border: 2px dashed #a0a0a0;
            border-radius: 5px;
            aspect-ratio: 1;
            width: 25vw;
            display: flex;
            align-items: center;
            justify-content: center;
            color: #a0a0a0;
            font-size: 1.5rem;
            text-align: center;
            cursor: pointer;
        }

        progress {
            margin: 50px 0;
            width: 100%;
        }

        @media only screen and (max-width: 800px) {
            .message-container {
                width: 100vw;
                border-radius: 0;
            }

            .message-header {
                border-top-left-radius: 0;
                border-top-right-radius: 0;
            }

            .drag-drop {
                width: 75vw;
            }
        }
    </style>
</head>

<body>
    <main>
        <div class="message-container">
            <div class="message-header">
                <span id="save-icon" class="material-symbols-outlined hover-icon" onclick="save(this)">save</span>
                <span id="copy-icon" class="material-symbols-outlined hover-icon" onclick="copy(this)">content_copy</span>
            </div>
            <pre class="fira-code-font" contenteditable="plaintext-only"><%= message || "No message saved" %></pre>
        </div>

        <hr>

        <% if (filename) { %>
                <button>
                    <span id="delete-icon" class="material-symbols-outlined" onclick="deleteFile()">delete</span>
                    <a href="/download_file">
                        <span class="material-symbols-outlined">download</span>
                    <span>
                        <%= filename %>
                    </span>
                    </a>
                </button>
            <% } else { %>
                <div class="drag-drop-container">
                    <div class="drag-drop" onclick="openFilePicker(this)" ondragover="dragOverHandler(event)"
                        ondrop="dropHandler(event)">
                        <span>Click here or<br>Drop files to upload</span>
                    </div>
                    <progress value="0" max="100"></progress>
                </div>
                <% } %>
    </main>
    <script>

        function copyPreContent(preElement) {
            if (!navigator.clipboard) {
                // Fallback for older browsers
                return fallbackCopyToClipboard(preElement.textContent);
            }
            return navigator.clipboard.writeText(preElement.textContent)
                .catch(err => {
                    console.err('Failed to copy text:', err);
                });
        }

        function fallbackCopyToClipboard(text) {
            const tempElement = document.createElement('textarea');
            tempElement.value = text;
            document.body.appendChild(tempElement);
            tempElement.select();
            document.execCommand('copy');
            document.body.removeChild(tempElement);
        }

        function wait(milliseconds) {
            return new Promise(resolve => {
                setTimeout(resolve, milliseconds);
            });
        }

        async function copy(element) {
            copyPreContent(document.querySelector('pre'));
            element.textContent = 'done';
            await wait(5000);
            element.textContent = 'content_copy';
        };

        async function save(element) {
            element.textContent = 'hourglass_top';
            fetch('/upload/message', {
                method: 'POST',
                body: new URLSearchParams({
                    'message': document.querySelector('pre').textContent
                }),
                headers: {
                    "Content-Type": "application/x-www-form-urlencoded"
                },
                signal: AbortSignal.timeout(5000)
            }).then(async () => {
                await wait(500);
                element.textContent = 'hourglass_bottom';
                await wait(500);
                element.textContent = 'done';
            }).catch(() => {
                element.textContent = 'error';
            }).finally(async () => {
                await wait(1000);
                element.textContent = 'save';
            });
        };

        async function openFilePicker(dragDropEl) {
            const inputEl = document.createElement('input');
            inputEl.type = 'file';
            inputEl.onchange = () => {
                dragDropEl.children[0].innerText = inputEl.files[0].name;
                sendFile(inputEl.files[0]);
            };
            inputEl.click();
        }

        async function sendFile(file) {
            const progressBar = document.getElementsByTagName('progress')[0];
            var xhr = new XMLHttpRequest();
            xhr.open('POST', '/upload/' + encodeURIComponent(file.name) + '/' + encodeURIComponent(file.size));

            xhr.upload.onprogress = function (event) {
                if (event.lengthComputable) {
                    progressBar.value = Math.round((event.loaded / event.total) * 100);
                }
            }

            xhr.onload = () => {
                if (xhr.status == 200) {
                    window.location.reload();
                } else {
                    alert('File upload failed');
                }
            }

            xhr.onerror = () => {
                alert('File upload failed');
            }

            xhr.send(file);
        }

        function dragOverHandler(event) {
            event.preventDefault();
        }

        function dropHandler(event) {
            event.preventDefault();
            if (event.dataTransfer.files.length > 0) {
                document.getElementsByClassName('drag-drop')[0].children[0].innerText = event.dataTransfer.files[0].name;
                sendFile(event.dataTransfer.files[0]);
            }
        }

        function deleteFile() {
            fetch('/delete_file', {
                method: 'POST'
            }).then(() => {
                window.location.reload();
            });
        }

        document.addEventListener('keydown', e => {
            if (e.ctrlKey && e.key === 's') {
                e.preventDefault();
                save(document.getElementById('save-icon'));
            }
        });
    </script>
</body>

</html>